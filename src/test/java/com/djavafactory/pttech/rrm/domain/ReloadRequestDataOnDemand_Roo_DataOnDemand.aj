// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.djavafactory.pttech.rrm.domain;

import com.djavafactory.pttech.rrm.domain.ReloadRequest;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect ReloadRequestDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReloadRequestDataOnDemand: @Component;
    
    private Random ReloadRequestDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<ReloadRequest> ReloadRequestDataOnDemand.data;
    
    public ReloadRequest ReloadRequestDataOnDemand.getNewTransientReloadRequest(int index) {
        com.djavafactory.pttech.rrm.domain.ReloadRequest obj = new com.djavafactory.pttech.rrm.domain.ReloadRequest();
        setTransId(obj, index);
        setStatus(obj, index);
        setMfgNumber(obj, index);
        setReloadAmount(obj, index);
        setServiceProviderId(obj, index);
        setTransCode(obj, index);
        setRequestedTime(obj, index);
        setTngKey(obj, index);
        setModifiedTime(obj, index);
        setAcquirerTerminal(obj, index);
        setCmmpTrxId(obj, index);
        setMobileNo(obj, index);
        return obj;
    }
    
    public void ReloadRequestDataOnDemand.setTransId(ReloadRequest obj, int index) {
        java.lang.String transId = "transId_" + index;
        obj.setTransId(transId);
    }
    
    public void ReloadRequestDataOnDemand.setStatus(ReloadRequest obj, int index) {
        java.lang.String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void ReloadRequestDataOnDemand.setMfgNumber(ReloadRequest obj, int index) {
        java.lang.Long mfgNumber = new Integer(index).longValue();
        obj.setMfgNumber(mfgNumber);
    }
    
    public void ReloadRequestDataOnDemand.setReloadAmount(ReloadRequest obj, int index) {
        java.math.BigDecimal reloadAmount = java.math.BigDecimal.valueOf(index);
        obj.setReloadAmount(reloadAmount);
    }
    
    public void ReloadRequestDataOnDemand.setServiceProviderId(ReloadRequest obj, int index) {
        java.lang.String serviceProviderId = "serviceProviderId_" + index;
        obj.setServiceProviderId(serviceProviderId);
    }
    
    public void ReloadRequestDataOnDemand.setTransCode(ReloadRequest obj, int index) {
        java.lang.String transCode = "transCode_" + index;
        obj.setTransCode(transCode);
    }
    
    public void ReloadRequestDataOnDemand.setRequestedTime(ReloadRequest obj, int index) {
        java.util.Date requestedTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRequestedTime(requestedTime);
    }
    
    public void ReloadRequestDataOnDemand.setTngKey(ReloadRequest obj, int index) {
        java.lang.String tngKey = "tngKey_" + index;
        obj.setTngKey(tngKey);
    }
    
    public void ReloadRequestDataOnDemand.setModifiedTime(ReloadRequest obj, int index) {
        java.util.Date modifiedTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setModifiedTime(modifiedTime);
    }
    
    public void ReloadRequestDataOnDemand.setAcquirerTerminal(ReloadRequest obj, int index) {
        java.lang.String acquirerTerminal = "acquirerTerminal_" + index;
        obj.setAcquirerTerminal(acquirerTerminal);
    }
    
    public void ReloadRequestDataOnDemand.setCmmpTrxId(ReloadRequest obj, int index) {
        java.lang.String cmmpTrxId = "cmmpTrxId_" + index;
        obj.setCmmpTrxId(cmmpTrxId);
    }
    
    public void ReloadRequestDataOnDemand.setMobileNo(ReloadRequest obj, int index) {
        java.lang.Long mobileNo = new Integer(index).longValue();
        obj.setMobileNo(mobileNo);
    }
    
    public ReloadRequest ReloadRequestDataOnDemand.getSpecificReloadRequest(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ReloadRequest obj = data.get(index);
        return ReloadRequest.findReloadRequest(obj.getId());
    }
    
    public ReloadRequest ReloadRequestDataOnDemand.getRandomReloadRequest() {
        init();
        ReloadRequest obj = data.get(rnd.nextInt(data.size()));
        return ReloadRequest.findReloadRequest(obj.getId());
    }
    
    public boolean ReloadRequestDataOnDemand.modifyReloadRequest(ReloadRequest obj) {
        return false;
    }
    
    public void ReloadRequestDataOnDemand.init() {
        data = com.djavafactory.pttech.rrm.domain.ReloadRequest.findReloadRequestEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ReloadRequest' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.djavafactory.pttech.rrm.domain.ReloadRequest>();
        for (int i = 0; i < 10; i++) {
            com.djavafactory.pttech.rrm.domain.ReloadRequest obj = getNewTransientReloadRequest(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
