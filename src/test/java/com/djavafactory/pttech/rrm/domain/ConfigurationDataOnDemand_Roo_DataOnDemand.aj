// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.djavafactory.pttech.rrm.domain;

import com.djavafactory.pttech.rrm.domain.Configuration;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect ConfigurationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConfigurationDataOnDemand: @Component;
    
    private Random ConfigurationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Configuration> ConfigurationDataOnDemand.data;
    
    public Configuration ConfigurationDataOnDemand.getNewTransientConfiguration(int index) {
        com.djavafactory.pttech.rrm.domain.Configuration obj = new com.djavafactory.pttech.rrm.domain.Configuration();
        setConfigKey(obj, index);
        setConfigValue(obj, index);
        setOrdering(obj, index);
        return obj;
    }
    
    public void ConfigurationDataOnDemand.setConfigKey(Configuration obj, int index) {
        java.lang.String configKey = "configKey_" + index;
        obj.setConfigKey(configKey);
    }
    
    public void ConfigurationDataOnDemand.setConfigValue(Configuration obj, int index) {
        java.lang.String configValue = "configValue_" + index;
        obj.setConfigValue(configValue);
    }
    
    public void ConfigurationDataOnDemand.setOrdering(Configuration obj, int index) {
        java.lang.Integer ordering = new Integer(index);
        obj.setOrdering(ordering);
    }
    
    public Configuration ConfigurationDataOnDemand.getSpecificConfiguration(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Configuration obj = data.get(index);
        return Configuration.findConfiguration(obj.getId());
    }
    
    public Configuration ConfigurationDataOnDemand.getRandomConfiguration() {
        init();
        Configuration obj = data.get(rnd.nextInt(data.size()));
        return Configuration.findConfiguration(obj.getId());
    }
    
    public boolean ConfigurationDataOnDemand.modifyConfiguration(Configuration obj) {
        return false;
    }
    
    public void ConfigurationDataOnDemand.init() {
        data = com.djavafactory.pttech.rrm.domain.Configuration.findConfigurationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Configuration' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.djavafactory.pttech.rrm.domain.Configuration>();
        for (int i = 0; i < 10; i++) {
            com.djavafactory.pttech.rrm.domain.Configuration obj = getNewTransientConfiguration(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
