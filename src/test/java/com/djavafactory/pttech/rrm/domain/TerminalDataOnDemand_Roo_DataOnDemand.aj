// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.djavafactory.pttech.rrm.domain;

import com.djavafactory.pttech.rrm.domain.Terminal;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect TerminalDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TerminalDataOnDemand: @Component;
    
    private Random TerminalDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Terminal> TerminalDataOnDemand.data;
    
    public Terminal TerminalDataOnDemand.getNewTransientTerminal(int index) {
        com.djavafactory.pttech.rrm.domain.Terminal obj = new com.djavafactory.pttech.rrm.domain.Terminal();
        obj.setTerminalId("terminalId_" + index);
        obj.setIp("ip_" + index);
        obj.setPort("port_" + index);
        obj.setDescription("description_" + index);
        obj.setAcquirerState(null);
        obj.setCity("city_" + index);
        obj.setLocation("location_" + index);
        obj.setStatus("status_" + index);
        obj.setCreatedTime(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setModifiedTime(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setCreatedBy("createdBy_" + index);
        obj.setModifiedBy("modifiedBy_" + index);
        obj.setAcquirer(null);
        obj.setTerminalType(null);
        return obj;
    }
    
    public Terminal TerminalDataOnDemand.getSpecificTerminal(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Terminal obj = data.get(index);
        return Terminal.findTerminal(obj.getId());
    }
    
    public Terminal TerminalDataOnDemand.getRandomTerminal() {
        init();
        Terminal obj = data.get(rnd.nextInt(data.size()));
        return Terminal.findTerminal(obj.getId());
    }
    
    public boolean TerminalDataOnDemand.modifyTerminal(Terminal obj) {
        return false;
    }
    
    public void TerminalDataOnDemand.init() {
        data = com.djavafactory.pttech.rrm.domain.Terminal.findTerminalEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Terminal' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.djavafactory.pttech.rrm.domain.Terminal>();
        for (int i = 0; i < 10; i++) {
            com.djavafactory.pttech.rrm.domain.Terminal obj = getNewTransientTerminal(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
