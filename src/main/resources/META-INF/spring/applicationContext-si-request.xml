<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amqp="http://www.springframework.org/schema/integration/amqp"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/integration
			                http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
                            http://www.springframework.org/schema/integration/amqp
                            http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.0.xsd
                            http://www.springframework.org/schema/util
                            http://www.springframework.org/schema/util/spring-util-3.0.xsd">


        <util:properties id="amqp" location="classpath:/META-INF/spring/amqp.properties" />

        <beans:bean id="messageHandler" class="com.djavafactory.pttech.rrm.integration.MessageHandler" />
        <beans:bean id="filterBean" class="com.djavafactory.pttech.rrm.integration.MessageFilter" />
        <beans:bean id="transformerBean" class="com.djavafactory.pttech.rrm.integration.MessageTransformer" />
        <beans:bean id="routerBean" class="com.djavafactory.pttech.rrm.integration.MessageRouter" />
        <beans:bean id="mapperBean" class="com.djavafactory.pttech.rrm.integration.MessageMapper" />
        <beans:bean id="messagePersistenceBean" class="com.djavafactory.pttech.rrm.integration.MessagePersistence" />

        <amqp:inbound-channel-adapter channel="rrmReloadReqInboundChannel"
                queue-name="#{amqp['queue.rrm.reload.req']}" connection-factory="singleConnectionFactory" />

        <service-activator input-channel="rrmReloadReqInboundChannel"
		        ref="messageHandler" method="reloadRequestHandler" output-channel="rrmReloadReqOutputChannel"/>

        <channel id="rrmReloadReqOutputChannel" />
        <chain input-channel="rrmReloadReqOutputChannel" output-channel="routeMessageChannel">
            <transformer ref="transformerBean" method="transformReloadRequest"  />
            <filter ref="filterBean" method="reloadRequestFilter" discard-channel="rejectedMessagesChannel" />
        </chain>

        <channel id="rejectedMessagesChannel">
            <queue capacity="100" />
        </channel>
        <transformer input-channel="rejectedMessagesChannel" ref="transformerBean" method="transformRejectedResponse" output-channel="rmiReloadStatusChannel" />

        <channel id="routeMessageChannel">
            <queue capacity="100" />
        </channel>
        <router input-channel="routeMessageChannel" ref="routerBean" method="routeReloadRequest" />

        <channel id="newReloadReqPersistChannel">
            <queue capacity="100" />
        </channel>
        <chain input-channel="newReloadReqPersistChannel" output-channel="tngReloadRequestChannel">
            <transformer ref="mapperBean" method="mapNewReloadRequest" />
            <service-activator ref="messagePersistenceBean" method="mergeReloadRequest" />
        </chain>

        <channel id="failedReloadReqPersistChannel">
            <queue capacity="100" />
        </channel>
        <chain input-channel="failedReloadReqPersistChannel" output-channel="tngReloadRequestChannel">
            <transformer ref="mapperBean" method="mapFailedReloadRequest" />
            <service-activator ref="messagePersistenceBean" method="mergeReloadRequest" />
        </chain>

        <channel id="expiredReloadReqPersistChannel">
            <queue capacity="100" />
        </channel>
        <chain input-channel="expiredReloadReqPersistChannel" output-channel="tngReloadRequestChannel">
            <transformer ref="mapperBean" method="mapExpiredReloadRequest" />
            <service-activator ref="messagePersistenceBean" method="mergeReloadRequest" />
        </chain>

        <channel id="successReloadReqPersistChannel">
            <queue capacity="100" />
        </channel>
        <chain input-channel="successReloadReqPersistChannel" output-channel="tngReloadRequestChannel">
            <transformer ref="mapperBean" method="mapSuccessReloadRequest" />
            <service-activator ref="messagePersistenceBean" method="mergeReloadRequest" />
        </chain>

        <channel id="tngReloadReqPersistChannel">
            <queue capacity="100" />
        </channel>
        <chain input-channel="tngReloadReqPersistChannel" output-channel="rtmReloadRequestChannel">
            <transformer ref="mapperBean" method="mapTngReloadRequest" />
            <service-activator ref="messagePersistenceBean" method="mergeReloadRequest" />
        </chain>

        <channel id="tngReloadRequestChannel">
            <queue capacity="100" />
        </channel>
        <!-- Waiting for confirmation on whether there's proxy for tng. -->

        <channel id="rtmReloadRequestChannel">
            <queue capacity="100" />
        </channel>
        <transformer input-channel="rtmReloadRequestChannel" ref="transformerBean" method="transformMessageToJson" output-channel="rtmReloadInboundChannel" />

        <channel id="rmiReloadStatusChannel"/>
        <amqp:outbound-channel-adapter channel="rmiReloadStatusChannel" routing-key="#{amqp['queue.rmi.reload.status']}" amqp-template="rabbitTemplate"/>

        <channel id="rtmReloadInboundChannel"/>
        <amqp:outbound-channel-adapter channel="rtmReloadInboundChannel" routing-key="#{amqp['queue.rtm.reload.req']}" amqp-template="rabbitTemplate"/>

</beans:beans>