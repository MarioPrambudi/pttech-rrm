// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.djavafactory.pttech.rrm.domain;

import com.djavafactory.pttech.rrm.domain.TerminalType;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;

import org.springframework.transaction.annotation.Transactional;

privileged aspect TerminalType_Roo_Entity {

    declare @type: TerminalType:@Entity;

    @PersistenceContext
    transient EntityManager TerminalType.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long TerminalType.id;

    @Version
    @Column(name = "version")
    private Integer TerminalType.version;

    public Long TerminalType.getId() {
        return this.id;
    }

    public void TerminalType.setId(Long id) {
        this.id = id;
    }

    public Integer TerminalType.getVersion() {
        return this.version;
    }

    public void TerminalType.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void TerminalType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void TerminalType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TerminalType attached = TerminalType.findTerminalType(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void TerminalType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void TerminalType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public TerminalType TerminalType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TerminalType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager TerminalType.entityManager() {
        EntityManager em = new TerminalType().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long TerminalType.countTerminalTypes() {
        return entityManager().createQuery("select count(o) from TerminalType o", Long.class).getSingleResult();
    }

    public static List<TerminalType> TerminalType.findAllTerminalTypes() {
        return entityManager().createQuery("select o from TerminalType o", TerminalType.class).getResultList();
    }

    public static TerminalType TerminalType.findTerminalType(Long id) {
        if (id == null) return null;
        return entityManager().find(TerminalType.class, id);
    }

    public static List<TerminalType> TerminalType.findTerminalTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from TerminalType o", TerminalType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

}
