// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package com.djavafactory.pttech.rrm.client.managed.request;

import com.google.gwt.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.gwt.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(TerminalProxy.class);
        rtn.add(ReloadRequestProxy.class);
        rtn.add(ParamProxy.class);
        rtn.add(FirmwareProxy.class);
        rtn.add(ConfigurationProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(com.djavafactory.pttech.rrm.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (TerminalProxy.class.equals(clazz)) {
            processor.handleTerminal((TerminalProxy) null);
            return;
        }
        if (ReloadRequestProxy.class.equals(clazz)) {
            processor.handleReloadRequest((ReloadRequestProxy) null);
            return;
        }
        if (ParamProxy.class.equals(clazz)) {
            processor.handleParam((ParamProxy) null);
            return;
        }
        if (FirmwareProxy.class.equals(clazz)) {
            processor.handleFirmware((FirmwareProxy) null);
            return;
        }
        if (ConfigurationProxy.class.equals(clazz)) {
            processor.handleConfiguration((ConfigurationProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(com.djavafactory.pttech.rrm.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof TerminalProxy) {
            processor.handleTerminal((TerminalProxy) proxy);
            return;
        }
        if (proxy instanceof ReloadRequestProxy) {
            processor.handleReloadRequest((ReloadRequestProxy) proxy);
            return;
        }
        if (proxy instanceof ParamProxy) {
            processor.handleParam((ParamProxy) proxy);
            return;
        }
        if (proxy instanceof FirmwareProxy) {
            processor.handleFirmware((FirmwareProxy) proxy);
            return;
        }
        if (proxy instanceof ConfigurationProxy) {
            processor.handleConfiguration((ConfigurationProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleTerminal(TerminalProxy proxy);

    public abstract void handleReloadRequest(ReloadRequestProxy proxy);

    public abstract void handleParam(ParamProxy proxy);

    public abstract void handleFirmware(FirmwareProxy proxy);

    public abstract void handleConfiguration(ConfigurationProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
