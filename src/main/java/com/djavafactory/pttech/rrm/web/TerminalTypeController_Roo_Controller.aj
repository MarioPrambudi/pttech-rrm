// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.djavafactory.pttech.rrm.web;

import com.djavafactory.pttech.rrm.domain.Terminal;
import com.djavafactory.pttech.rrm.domain.TerminalType;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TerminalTypeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String TerminalTypeController.create(@Valid TerminalType terminalType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("terminalType", terminalType);
            return "terminaltypes/create";
        }
        uiModel.asMap().clear();
        terminalType.persist();
        return "redirect:/terminaltypes/" + encodeUrlPathSegment(terminalType.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String TerminalTypeController.createForm(Model uiModel) {
        uiModel.addAttribute("terminalType", new TerminalType());
        return "terminaltypes/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String TerminalTypeController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("terminaltype", TerminalType.findTerminalType(id));
        uiModel.addAttribute("itemId", id);
        return "terminaltypes/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String TerminalTypeController.update(@Valid TerminalType terminalType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("terminalType", terminalType);
            return "terminaltypes/update";
        }
        uiModel.asMap().clear();
        terminalType.merge();
        return "redirect:/terminaltypes/" + encodeUrlPathSegment(terminalType.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String TerminalTypeController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("terminalType", TerminalType.findTerminalType(id));
        return "terminaltypes/update";
    }
    
    @ModelAttribute("terminals")
    public Collection<Terminal> TerminalTypeController.populateTerminals() {
        return Terminal.findAllTerminals();
    }
    
    @ModelAttribute("terminaltypes")
    public Collection<TerminalType> TerminalTypeController.populateTerminalTypes() {
        return TerminalType.findAllTerminalTypes();
    }
    
    String TerminalTypeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
